"""
Bayesian_controller.py
----------------------
Manages Bayesian Optimization (via scikit-optimize) for calibration of
post-necking hardening laws in AISI 316L. Launches Abaqus worker jobs,
collects objective values, and saves optimization results.
"""
"""
Bayesian_worker.py
------------------
Objective function script for Bayesian Optimization. For a given n-value,
updates the Abaqus input file, runs the simulation, extracts results,
computes cost function against experimental data, and outputs the score
to objective.txt.
"""



"""
"""
TPE.py
------
Tree-structured Parzen Estimator (TPE) calibration of the post-necking hardening
law for additively manufactured AISI 316L using Hyperopt.

What it does
- Samples candidate hardening exponents `n ~ U(-0.5, 1.5)` with TPE (hyperopt).
- For each `n`:
  * Builds the plastic curve from tensile data (xlrd).
  * Injects the curve into an Abaqus input deck.
  * Runs the Abaqus job and opens the .odb.
  * Extracts U and RF, mirrors symmetry factors, and computes a cost vs. an
    interpolated experimental force–displacement curve.
- Logs every evaluation and saves a full history to `Optimization_Results_TPE.xlsx`.

Reproducibility
- Algorithm: Hyperopt TPE (`hyperopt.tpe.suggest`)
- Search space: `n ~ hp.uniform(-0.5, 1.5)`
- Budget: `max_evals = 15` (edit in code)
- Recommended seed: use `fmin(..., rstate=np.random.RandomState(42))`
- Abaqus: 2024 (command `abq2024.bat`)
- Python deps: hyperopt, numpy, scipy, pandas, xlrd

Run
    abaqus python TPE.py

Outputs
- Excel log: `Optimization_Results_TPE.xlsx` with per-iteration `n`, cost, and traces.
- Abaqus results: `.odb` files per iteration in `working_directory`.

Notes
- Ensure `working_directory`, `input_file`, and data file paths are valid.
- Replace any `np.inf` loss with a large finite value if Hyperopt warns (e.g., `1e6`).
"""




"""
GA.py
-----
Implements a Genetic Algorithm (GA) using the DEAP framework to calibrate the
post-necking hardening law of additively manufactured AISI 316L.

Main features:
- Initializes a population of candidate n-values (hardening exponent).
- Applies selection, crossover, and mutation to evolve the population.
- For each candidate:
    * Generates a plastic curve based on tensile test data.
    * Updates the Abaqus input file with the curve.
    * Runs the Abaqus simulation and collects displacement–force results.
    * Compares numerical results to interpolated experimental data.
    * Computes the cost function (relative error).
- Saves all iterations, costs, and best solution to 'Optimization_Results_GA.xlsx'.

Usage:
Run directly inside an Abaqus Python environment:
    abaqus python GA.py
"""



"""
PSO4.py
-------
Implements Particle Swarm Optimization (PSO) using the pyswarm library to
calibrate the post-necking hardening law of additively manufactured AISI 316L.

Main features:
- Initializes a swarm of particles representing candidate n-values.
- Updates particle positions and velocities using PSO rules.
- For each particle:
    * Generates a plastic curve from tensile test data.
    * Updates the Abaqus input file with the curve.
    * Runs the Abaqus simulation and collects results.
    * Compares numerical results with interpolated experimental data.
    * Computes the cost function (mean relative error).
- Tracks convergence and saves results to 'Optimization_Results_PSO.xlsx'.

Usage:
Run directly inside an Abaqus Python environment:
    abaqus python PSO4.py
"""




